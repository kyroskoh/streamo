#!/usr/bin/env sh
#
# Streamo - A sort of simple solution to stream to Twitch.tv from Linux and
# other X11-based operating systems
#
# Copyright (c) 2015, Robin 'sulami' Schroer <sulami@peerwire.org>
# See LICENSE for more information
#

SIZE="1920x1080"
RESOLUTION="1280x720"
FRAMERATE="30"
STREAMKEY=""
THREADS="4"
BITRATE="2500"
AUDIO="pulse"
CHANNELS="2"
VERBOSE=0
SIMULATE=0
FFMPEG='ffmpeg'
NOBUF="stdbuf -e0 -o0"

die () {
    [ "$2" ] && echo "$2"
    exit $1
}

usage () {
    echo "Options:"
    echo "  -s <int>x<int>  - Desktop size (def: 1920x1080)"
    echo "  -r <int>x<int>  - Stream resolution (def: 1280x720)"
    echo "  -f <int>        - Framerate (def: 30)"
    echo "  -k <str>        - Streamkey (Acquire from Twitch.tv)"
    echo "  -t <int>        - Threads (def: 4)"
    echo "  -b <int>        - Video bitrate in kb/s (def: 2500)"
    echo "  -a <str>        - Audio framework (def: pulse)"
    echo "  -c <int>        - Audio channels (def: 2)"
    echo "  -v              - Verbose output"
    echo "  -e              - Simulate execution"
    echo "  -h              - This help output"
}

loadOps () {
    while getopts ":s:r:f:k:t:b:a:c:veh" opt; do
        case $opt in
            s)
                SIZE=$OPTARG
                ;;
            r)
                RESOLUTION=$OPTARG
                ;;
            f)
                FRAMERATE=$OPTARG
                ;;
            k)
                STREAMKEY=$OPTARG
                ;;
            t)
                THREADS=$OPTARG
                ;;
            b)
                BITRATE=$OPTARG
                ;;
            a)
                AUDIO=$OPTARG
                ;;
            c)
                CHANNELS=$OPTARG
                ;;
            e)
                SIMULATE=1
                ;;
            v)
                VERBOSE=1
                ;;
            h)
                usage
                die 0
                ;;
            \?)
                die 1 "Error: Invalid option: -$OPTARG"
                ;;
            :)
                die 1 "Error: Option -$OPTARG requires an argument"
                ;;
        esac
    done
}

checkAndSetVars () {
    if [ -z "$STREAMKEY" ]; then
        if [ $SIMULATE = 1 ]; then
            echo "Warning: You need to specify a stream key"
        else
            die 1 "Error: You need to specify a stream key"
        fi
    fi

    for c in `seq ${CHANNELS}`; do
        AUDIOCODE="$AUDIOCODE -f $AUDIO -i default"
    done

    [ ${CHANNELS} -ne 0 ] && {
        MIXCODE="-filter_complex \
                 amix=inputs=${CHANNELS}:duration=first:dropout_transition=3 \
                 -acodec libmp3lame \
                 -ar 44100 \
                 -b:a 128k"
    }

    FFMPEGARGS="-hide_banner -f x11grab \
                -video_size ${SIZE} \
                -framerate ${FRAMERATE} \
                -i ${DISPLAY}+0,0 \
                ${AUDIOCODE} \
                -vcodec libx264 \
                -preset veryfast \
                -s ${RESOLUTION} \
                -b:v ${BITRATE}k \
                -minrate ${BITRATE}k \
                -maxrate ${BITRATE}k \
                -bufsize $((2 * ${BITRATE}))k \
                -g $((2 * ${FRAMERATE})) \
                ${MIXCODE} \
                -threads ${THREADS} \
                -pix_fmt yuv420p \
                -f flv rtmp://live.justin.tv/app/${STREAMKEY}"

    return 0
}

formatArgs() {
    FORMATTED=$(echo "$FFMPEG $FFMPEGARGS" | sed -e 's/ [ ]*/ /g')
}

printOps () {
    echo "$FORMATTED"
}

runStream () {
    if [ $VERBOSE = 1 ]
    then
        $FORMATTED
    else
        $FORMATTED 2>&1 | \
        ${NOBUF} tr '\r' '\n' | \
        ${NOBUF} grep 'fps=' | \
        ${NOBUF} sed 's/=[ ]*/=/g' | \
        ${NOBUF} awk ' \
            split($2, f, "=") \
            split($6, b, "=") \
            split($8, d, "=") \
            { print \
                "FPS:", f[2], \
                "Bitrate:", b[2], \
                "Dropped Frames:", d[2], \
                "\r" \
            } \
            ORS=""'
    fi
}

execWork () {
    if [ $SIMULATE = 1 ]
    then
        printOps
    else
        runStream
    fi
}

loadOps "$@"
checkAndSetVars || die 1 "Error: could not set variables"
formatArgs || die 1 "Error: could not format ffmpeg argmuents"
execWork || die 1

# vim: ts=4 sw=4 sts=4 ft=sh

